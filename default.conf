server {
    listen 80;
    server_name gamification.kz;

    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
    }

#    location / {
#        return 301 https://$host$request_uri;
#    }

#}



#server {
#    listen       443 ssl;
#    server_name  gamification.kz;

#    ssl_certificate /etc/nginx/fullchain.pem;
#    ssl_certificate_key /etc/nginx/privkey.pem;

#    location /.well-known/acme-challenge/ {
#        root /usr/share/nginx/html;
#    }

    location / {
        root   /usr/share/nginx/html/welcome;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    location /main {
        root   /usr/share/nginx/html;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    location /achievements {
        root   /usr/share/nginx/html;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    location /day-info {
        root   /usr/share/nginx/html;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    location /settings {
        root   /usr/share/nginx/html;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    location /tasks {
        root   /usr/share/nginx/html;
        index  index.html;
        add_header 'Access-Control-Allow-Origin' '*';      
    }

    location /data/scripts {
        root /usr/share/nginx/html;
        add_header 'Access-Control-Allow-Origin' '*';
    }

    location /data/images {
        root /usr/share/nginx/html;
        add_header 'Access-Control-Allow-Origin' '*';
    }
    
    location /data/achievements {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local user_id = ngx.var.cookie_user_id
            if not user_id then
                ngx.say("User ID not found in cookies")
                return
            end

            local user_data_dir_path = "/usr/share/nginx/html/data/" .. user_id
            local default_file_path = "/usr/share/nginx/html/data/achievements.json"
            local achievements_file_path = "/usr/share/nginx/html/data/" .. user_id .. "/achievements_" .. user_id .. ".json"
            
            local achievements_file = io.open(achievements_file_path, "r")
            if not achievements_file then
                local default_file = io.open(default_file_path, "r")
                if not default_file then
                    ngx.say("Default file not found")
                    return
                end
                local default_content = default_file:read("*a")
                default_file:close()
                
                local success, err = os.execute("mkdir -p " .. user_data_dir_path)
                if not success then
                    ngx.say("Failed to create directory: ", err)
                    return
                end
                local new_achievements_file = io.open(achievements_file_path, "w")
                new_achievements_file:write(default_content)
                new_achievements_file:close()
            else
                achievements_file:close()
            end
            
            local achievements_file = io.open(achievements_file_path, "r")
            local content = achievements_file:read("*a")
            achievements_file:close()
            ngx.say(content)
        }
    }

    location /data/sessions {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local user_id = ngx.var.cookie_user_id
            if not user_id then
                ngx.say("User ID not found in cookies")
                return
            end

            local user_data_dir_path = "/usr/share/nginx/html/data/" .. user_id
            local default_file_path = "/usr/share/nginx/html/data/sessions.json"
            local sessions_file_path = "/usr/share/nginx/html/data/" .. user_id .. "/sessions_" .. user_id .. ".json"
            
            local sessions_file = io.open(sessions_file_path, "r")
            if not sessions_file then
                local default_file = io.open(default_file_path, "r")
                if not default_file then
                    ngx.say("Default file not found")
                    return
                end
                local default_content = default_file:read("*a")
                default_file:close()

                local success, err = os.execute("mkdir -p " .. user_data_dir_path)
                if not success then
                    ngx.say("Failed to create directory: ", err)
                    return
                end
                local new_sessions_file = io.open(sessions_file_path, "w")
                new_sessions_file:write(default_content)
                new_sessions_file:close()
            else
                sessions_file:close()
            end
            
            local sessions_file = io.open(sessions_file_path, "r")
            local content = sessions_file:read("*a")
            sessions_file:close()
            ngx.say(content)
        }
    }

    location /data/tasks {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local user_id = ngx.var.cookie_user_id
            if not user_id then
                ngx.say("User ID not found in cookies")
                return
            end

            local user_data_dir_path = "/usr/share/nginx/html/data/" .. user_id
            local default_file_path = "/usr/share/nginx/html/data/tasks.json"
            local tasks_file_path = "/usr/share/nginx/html/data/" .. user_id .. "/tasks_" .. user_id .. ".json"
            
            local tasks_file = io.open(tasks_file_path, "r")
            if not tasks_file then
                local default_file = io.open(default_file_path, "r")
                if not default_file then
                    ngx.say("Default file not found")
                    return
                end
                local default_content = default_file:read("*a")
                default_file:close()
                
                local success, err = os.execute("mkdir -p " .. user_data_dir_path)
                if not success then
                    ngx.say("Failed to create directory: ", err)
                    return
                end
                local new_tasks_file = io.open(tasks_file_path, "w")
                new_tasks_file:write(default_content)
                new_tasks_file:close()
            else
                tasks_file:close()
            end
            
            local tasks_file = io.open(tasks_file_path, "r")
            local content = tasks_file:read("*a")
            tasks_file:close()
            ngx.say(content)
        }
    }

    location /update/tasks {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local cjson = require "cjson"
            ngx.req.read_body()
            local body_data = ngx.req.get_body_data()
            if not body_data then
                ngx.say("No data received")
                return
            end

            local user_id = ngx.var.cookie_user_id 
            local handle = io.popen("/usr/bin/python3 /usr/share/nginx/html/scripts/update_tasks.py '" .. ngx.escape_uri(body_data) .. "' '" .. user_id .. "'", "r")
            local result = handle:read("*a")
            handle:close()
            ngx.say(result)
        }
    }

    location /update/sessions {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local cjson = require "cjson"
            ngx.req.read_body()
            local body_data = ngx.req.get_body_data()
            if not body_data then
                ngx.say("No data received")
                return
            end

            local user_id = ngx.var.cookie_user_id 
            local handle = io.popen("/usr/bin/python3 /usr/share/nginx/html/scripts/update_sessions.py '" .. ngx.escape_uri(body_data) .. "' '" .. user_id .. "'", "r")
            local result = handle:read("*a")
            handle:close()
            ngx.say(result)
        }
    }

    location /update/achievements {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local cjson = require "cjson"
            ngx.req.read_body()
            local body_data = ngx.req.get_body_data()
            if not body_data then
                ngx.say("No data received")
                return
            end

            local user_id = ngx.var.cookie_user_id 
            local handle = io.popen("/usr/bin/python3 /usr/share/nginx/html/scripts/update_achievements.py '" .. ngx.escape_uri(body_data) .. "' '" .. user_id  .. "'", "r")
            local result = handle:read("*a")
            handle:close()
            ngx.say(result)
        }
    }

    location /load/save {
        add_header 'Access-Control-Allow-Origin' '*';
        content_by_lua_block {
            local cjson = require "cjson"
            ngx.req.read_body()
            local body_data = ngx.req.get_body_data()
            if not body_data then
                ngx.say("No data received")
                return
            end

            local user_id = ngx.var.cookie_user_id 
            local handle = io.popen("/usr/bin/python3 /usr/share/nginx/html/scripts/load_save.py '" .. ngx.escape_uri(body_data) .. "' '" .. user_id .. "'", "r")
            local result = handle:read("*a")
            handle:close()
            ngx.say(result)
        }
    }
}
